{"arn": "arn:aws:codeguru-reviewer:us-east-2:581361757134:association:74872063-c16f-449d-8734-80b336f456d2:code-review:RepositoryAnalysis-Analyze-2021-03-02-17-03-10-769599", "repository_name": "net.osmand.parkingPlugin", "branch": "r3.9", "metrics": {"MeteredLinesOfCodeCount": 290810, "FindingsCount": 268}, "recommendations": [{"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/TileSourceManager.java", "RecommendationId": "0042767f00370d4da7c388e0bcd2d00df0727910b1ac8d0910669736f18876e2", "StartLine": 556, "EndLine": 556, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *reader*. The resource is referenced at lines 556, 558. The resource is closed at line 560. There are other execution paths that do not contain closure statements, for example, when BufferedReader.readLine throws an exception. Ensure *reader* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/layers/geometry/GeometryWay.java", "RecommendationId": "01b134219218722174a436705ae3d3f484b93508ccfaa7cc3f6bc2aac7fcd74b", "StartLine": 275, "EndLine": 275, "Description": "**Problem**\nAnalysis of this package determined that this line of code might contain a resource leak. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *path*. Currently, there are execution paths that do not contain closure statements, for example, when an else condition at line 330 evaluates to true.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/monitoring/LiveMonitoringHelper.java", "RecommendationId": "0236aa7eb3e6cd2e4b3da28f30d2d79e99024143987796ace43fe1d69b849a30", "StartLine": 119, "EndLine": 120, "Description": "\n\n**Problem**  \n You are using a `ConcurrentLinkedQueue`, but your usage of `isEmpty()` and `peek()` may not be thread-safe at lines: **119 and 120**. If the `ConcurrentLinkedQueue` contains only **one element** and another thread removes that element, this thread's call to `peek()` will get `null`. This `null` may be used at line: **120**. The removes that can remove the element are at lines: **124** and **160**.\n\n**Fix**  \n Consider calling `peek()`, checking instead of your current check if the returned object is `null`, and only then using that object. "}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/LocationConvert.java", "RecommendationId": "02a218a21bd63cc26d0550bf3be77716c1f8b20b54e9ecac9bb44bbd08b9aec3", "StartLine": 114, "EndLine": 114, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/jwetherell/openmap/common/GreatCircle.java", "RecommendationId": "043d289491bfdd1b4bedc4cd57a6cfbf17de6d60e364921d2dfd4262ab39b139", "StartLine": 230, "EndLine": 240, "Description": "Similar code fragments were detected in the same file at the following lines: 230:240, 362:372.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "048b884549538ac998b7ad9a9782fe416d7ba139cf2e9a070bd2fad677345ac6", "StartLine": 54569, "EndLine": 54569, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/org/openplacereviews/opendb/SecUtils.java", "RecommendationId": "05d7dabdd7fa541e793eb234dd56ad97ddc3216a8d4e724ec1e202c6956a41a4", "StartLine": 134, "EndLine": 134, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "05f6e4cb463ec080982eb9f59c04372d30b5e2cce563a5fe8664c0b9875ae8bf", "StartLine": 60162, "EndLine": 60162, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/GeocodingLookupService.java", "RecommendationId": "06f344d8834a8efec3cd26c5a00a131287649debff45f740a473c6ba0407a7d3", "StartLine": 250, "EndLine": 250, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd/src/net/osmand/plus/FavouritesDbHelper.java", "RecommendationId": "070d03202a51ac3fcf89b8f6408faa7868a626e945b0f43e52f4eb4455088ff4", "StartLine": 574, "EndLine": 574, "Description": "**Problem**\nAnalysis of this package determined that this line of code contains a resource that might not have closed properly. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *out*. The resource is referenced at lines 574, 576. The resource is closed at line 578. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "07892711894f52fcc0af2f7b58fd947bdca434e44913fbcee32c9fb26594e9cf", "StartLine": 58035, "EndLine": 58035, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/AndroidNetworkUtils.java", "RecommendationId": "0805e758d092563549957d66c3fd68f25a6e9621d3dfac4bb81e662ed4dbaead", "StartLine": 300, "EndLine": 300, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. The resource is referenced at line 300. The resource is closed at line 345. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/api/FileSettingsAPIImpl.java", "RecommendationId": "08515782ba3f4c20e07cb362e5570816f4bc589c93b6410f01f06f7fdc2171b5", "StartLine": 165, "EndLine": 174, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `get()`, `null` check, and `put()` may not be thread-safe at lines: **165, 166, 169, and 174**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and returns that reference to its caller at line: **175**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/GeoPointParserUtil.java", "RecommendationId": "08b00672f6fb3bcd06f5bef8a09e7df6badd6ac534919e3bf7ff52d395080594", "StartLine": 788, "EndLine": 788, "Description": "This code uses '%s' to format double: d (declared at line 784). This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 788. Consider formatting this data with '%f' instead."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/VectorTile.java", "RecommendationId": "09df99acb2a32c61dbe8de29351fba2f8959381d0d1a7764040f43f7bbfe489e", "StartLine": 2591, "EndLine": 2591, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/jwetherell/openmap/common/MGRSPoint.java", "RecommendationId": "0d066ac66c298a0907f4398b803163c65400056ad378f490268b6986e70af50b", "StartLine": 97, "EndLine": 97, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "0e37300981f7f334dc00795911277927adb4072f426653f7426a3e6e7ad5c3cb", "StartLine": 12398, "EndLine": 12398, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/VectorTile.java", "RecommendationId": "0e4e12cb279e7c2d8b13666d79266e2b7cf0522b8b609ac4b853bb0e8106bfa3", "StartLine": 103, "EndLine": 103, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "0e641be90db4b5d4898da0e354ebf75538a622b2d010f3cebbc6a244e71e9378", "StartLine": 927, "EndLine": 927, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/AnimateDraggingMapThread.java", "RecommendationId": "10be8ebb73c5e3070a130780cf517717db42377fa98d4ac7f14c43fd568c78f0", "StartLine": 362, "EndLine": 362, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "117b9f96f9b1e75b353a3a51c43e86e37e2f0dd1f27a73c6e76c3827d7992ddc", "StartLine": 3827, "EndLine": 3827, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/voice/AbstractPrologCommandPlayer.java", "RecommendationId": "13f0a58b9f063f0e360c1c82587b93f6646bceab87be8ad1b08dd7b1a011e724", "StartLine": 163, "EndLine": 163, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *config*. The resource is referenced at line 172. The resource is closed at line 173. There are other execution paths that do not contain closure statements, for example, when Struct constructor throws an exception. Ensure *config* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/render/RenderingRulesStorage.java", "RecommendationId": "15c26c55d21eb0c8f94895b54f5031ea67c91a2d6d4215f86e01d471b6855861", "StartLine": 559, "EndLine": 559, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. Currently, there are execution paths that do not contain closure statements, for example, when RenderingRulesStorage.parseRulesFromXmlInputStream throws an exception. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/OsmandRegions.java", "RecommendationId": "15ef7f0db75ab9fca491171a87c9623ea40ec1f507c147342dbe662ef1acd7e2", "StartLine": 106, "EndLine": 106, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the following resource: *is*. Currently, there are execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "RecommendationId": "18dcaacd811c2a6c64d1cf9f65d84638d014b8d7603c1af051a3284f01b50d40", "StartLine": 345, "EndLine": 345, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 347. The resource is closed at line 506. There are other execution paths that do not contain closure statements, for example, when XmlPullParser.setInput (in method initFromInputStream) throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "19636cca5c5d30392907c7b7464f7154150bad9f704843776ef083d2a89600d4", "StartLine": 17206, "EndLine": 17206, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/settings/backend/OsmandSettings.java", "RecommendationId": "198a154e7228a11b3e49b8852a34ecc28d85203f0ba3c5dcd7e70ba9d8fdaa21", "StartLine": 87, "EndLine": 87, "Description": "This class references 129 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "19ebe715c37f060526ac5b6976e4db47b8fbe09fabd17c2de4bf32d23ac79ff6", "StartLine": 25077, "EndLine": 25077, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/aidl/ConnectedApp.java", "RecommendationId": "1a42dc9d24fcfcd583747d4aadae587f0a278bb9f40c0b825c1bc6d46c403cf7", "StartLine": 240, "EndLine": 243, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `containsKey()` and `put()` may not be thread-safe at lines: **240 and 243**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and uses that reference at line: **246**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/RouteActivityType.java", "RecommendationId": "1ac6a11c74d2a8ea6fa63c08a0d5ab0f178a0d875af9a55682f5d782e330e04c", "StartLine": 74, "EndLine": 74, "Description": "This method contains 171 lines of code, not including blank lines or lines with only comments or Java punctuation characters. By comparison, 99% of the methods in the CodeGuru reference dataset contain fewer lines of code. Large methods might be difficult to read and have logic that is hard to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "1d05dbf24fa88051ac55916a66d36a24a8de42a044fc42467fb5ddc20100129e", "StartLine": 20342, "EndLine": 20342, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/aidl/OsmandAidlApi.java", "RecommendationId": "1d1993eb564087b22644a8c2ec32211b7541c04252aca2ca9ea28c8b039566fa", "StartLine": 1943, "EndLine": 1946, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `get()`, `null` check, and `put()` may not be thread-safe at lines: **1943, 1944, and 1946**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and uses that reference at line: **1949**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "1d3f4ee5a9225dc73b042881de7582ce9a758ea2e493d88fa94589c0935ec881", "StartLine": 589, "EndLine": 589, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *out*. The resource is referenced at line 590. The resource is closed at line 591. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *out* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadIndexesThread.java", "RecommendationId": "1da84ded8f035ccf22061d6d68909fc6047beb1c7a9ff9cd617f99e4f6c8ab9f", "StartLine": 497, "EndLine": 498, "Description": "\n\n**Problem**  \n You are using a `ConcurrentLinkedQueue`, but your usage of `isEmpty()` and `poll()` may not be thread-safe at lines: **497 and 498**. If the `ConcurrentLinkedQueue` contains only **one element** and two threads perform this **same check at the same time** , the second thread's call to `poll()` will get `null`. This `null` may be used at lines: **499**, **501**, **504**, **506**, **509**, **512**, **513**, **516**, **519**, **524**, and **529**.\n\n**Fix**  \n Consider calling `poll()`, checking instead of your current check if the returned object is `null`, and only then using that object. "}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "1df057f93b5e3a85bc96a8370ccef2b1759647af625f2267a8b91e76f75ca127", "StartLine": 43638, "EndLine": 43638, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "1e460293854c7cb43e5fb3cce2760b8bfa0ac81ecc48cb921d4061a764d7e1f5", "StartLine": 415, "EndLine": 415, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "1fc170aa694647bf98ef49e9e7ecb5f860f408533cdf9cc4f2938ccbe96dde49", "StartLine": 7121, "EndLine": 7121, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/helpers/DiscountHelper.java", "RecommendationId": "2037b51190b05c781d782eed2f3b23bea27ba4297685b038efa5359ed8778519", "StartLine": 138, "EndLine": 138, "Description": "The SimpleDateFormat object was created without setting the time zone. Make sure that you want to use the default time zone or use letter z, Z or X in the pattern. Otherwise, if you do not call setTimeZone() on the created SimpleDateFormat object, you might get an unexpected date and time when using the object."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "222f37636451cbd0bfb4e6c1488310eacc5fab28303ba4cffd9fbbc246725288", "StartLine": 17057, "EndLine": 17057, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/mapcontextmenu/MenuBuilder.java", "RecommendationId": "22cc3e84f7a3b5d51c55c7523fdb319e11b60e55e7b2f59dedca1f0f05b45172", "StartLine": 95, "EndLine": 95, "Description": "This class references 113 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/RouteDataObject.java", "RecommendationId": "22dcd112f63faa5a5ae69bca1ac4519267877493c5dffc21dd8aa54cbf25b595", "StartLine": 663, "EndLine": 673, "Description": "Similar code fragments were detected in the same file at the following lines: 663:673, 690:700.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd/src/net/osmand/aidl/OsmandAidlApi.java", "RecommendationId": "235498c29b9b0bd0525ff26dd1de0e43aa3169ce2e0dfa46589f035fccb0405f", "StartLine": 2146, "EndLine": 2150, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `containsKey()` and `put()` may not be thread-safe at lines: **2146 and 2150**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and uses that reference at line: **2153**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "23669a3fb81eff395ac87b4a5ecb82d527bafb00b5c0758a0c011f09e5594d15", "StartLine": 107, "EndLine": 107, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "23733074f850f2fd5972a0ccde0afefb9a2e15bdf7da384c43cdcc75d5f24b39", "StartLine": 4643, "EndLine": 4643, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/settings/backend/backup/SettingsImporter.java", "RecommendationId": "23c491260978d51812b2d2edb92316f59a22eb456a9e764bcc26f1e0081a09ae", "StartLine": 85, "EndLine": 85, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the following resource: *zipfile*. Execution paths that do not contain closure statements were detected. Ensure *zipfile* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "25ac21e45378c999604b8dbbb6d2eedd67dba4e1c35ff25099840c95f38a0688", "StartLine": 51193, "EndLine": 51193, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "25fabf3b258d8fd6f90d28b2a61de58083a6ef9e70e363a47aa0871d3d6bea15", "StartLine": 53270, "EndLine": 53270, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/OsmandApplication.java", "RecommendationId": "25feda4a94afedd00a2c47772cd2b193b69188d4c15fc72412297e8a16b825ec", "StartLine": 659, "EndLine": 659, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *writer*. The resource is referenced at lines 659, 660. The resource is closed at line 661. There are other execution paths that do not contain closure statements, for example, when Writer.write throws an exception. Ensure *writer* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "260c356f316d9382fd6902297d9bdd919bdd2b84108b50c7c1a38a62dfe2b449", "StartLine": 26583, "EndLine": 26583, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/GeoidAltitudeCorrection.java", "RecommendationId": "29c62f3f02ec1b5247765ace45345ab6e78d0f0cdcea8231d77ff7c8c0d531c6", "StartLine": 33, "EndLine": 33, "Description": "**Problem**\nThis line of code assigns a resource to a class field and there is no method that closes or returns this resource. This can result in a resource leak that slows down or crashes your system.\n\n**Fix**\nCreate a method in this class that closes the following resource: *rf*. After you use this resource, use this method to prevent a resource leak.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/api/FileSettingsAPIImpl.java", "RecommendationId": "2a42385982d82d6f30b648aeb9d26653e094a6eb190c9d43d73f06863ffc2e45", "StartLine": 138, "EndLine": 147, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `get()`, `null` check, and `put()` may not be thread-safe at lines: **138, 139, 142, and 147**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and returns that reference to its caller at line: **148**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd/src/net/osmand/plus/render/RendererRegistry.java", "RecommendationId": "2b969f02345e144cee2b6a4bad154169155743014e094d0db61ec53611dd1fb9", "StartLine": 222, "EndLine": 222, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource returned by the following method call: *getResourceAsStream*. Currently, there are execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure the object returned by *getResourceAsStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/MapRenderingTypes.java", "RecommendationId": "2bb4efe54aa2d193b722e6211483042b92c225d94ab8d0e059a63fc6c74d467d", "StartLine": 224, "EndLine": 224, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 231. The resource is closed at line 248. There are other execution paths that do not contain closure statements, for example, when XmlPullParser.setInput throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/audionotes/AudioVideoNotesPlugin.java", "RecommendationId": "2c103aea1303f7e38c457b195429df43c5d71199942c2f8878193688dc74975b", "StartLine": 2132, "EndLine": 2132, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fos*. The resource is referenced at line 2133. The resource is closed at line 2134. There are other execution paths that do not contain closure statements, for example, when FileOutputStream.write throws an exception. Ensure *fos* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/BinaryMapIndexReader.java", "RecommendationId": "2d309d7e9a5562b7af640fae87135b122ae0b0f7d427453541279bde47a1810b", "StartLine": 2184, "EndLine": 2184, "Description": "**Problem**\nAnalysis of this package determined that this line of code might contain a resource leak. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *reader*. Currently, there are execution paths that do not contain closure statements, for example, when an else condition at lines 2191, 2204, 2200, 2188, 2197, 2194 evaluate to true.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/router/TestRouting.java", "RecommendationId": "2d6c4039e530e1080a6e845badc8ff5778b4711cd8fbef2342a3705d09a47d2e", "StartLine": 133, "EndLine": 133, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. Currently, there are execution paths that do not contain closure statements, for example, when PlatformUtil.newXMLPullParser (in method test) throws an exception. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/aidl/ConnectedApp.java", "RecommendationId": "2dae952e55bbf01dd4c339dc298097f8153c35c67193f14d0fd439a9616ce731", "StartLine": 270, "EndLine": 271, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `containsKey()` and `put()` may not be thread-safe at lines: **270 and 271**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists.\n\n [View an example on GitHub](https://github.com/apache/hadoop/blob/f16cf877e565084c66bc63605659b157c4394dc8/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/startupprogress/StartupProgress.java#L272-L273) (external link).  \n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "2e30d047369bc60f878d4fa7b40498af6a40209c7701e17b36fedf86baf56b00", "StartLine": 122, "EndLine": 122, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "2e95b31df793652c16fff119c15c28303f9a60d9cdd5fe9a5a0ba8ced2321c4f", "StartLine": 57286, "EndLine": 57286, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/voice/JSMediaCommandPlayerImpl.java", "RecommendationId": "2fae9ec05f2026aa566ed3c817da3f7e5b6cfc71bcd3376194fbb69b9027f338", "StartLine": 35, "EndLine": 35, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *br*. The resource is referenced at lines 35, 38. The resource is closed at line 39. There are other execution paths that do not contain closure statements, for example, when Context.evaluateReader throws an exception. Ensure *br* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/inapp/InAppPurchases.java", "RecommendationId": "302e0ed7722453f1fd91fecaab8638685db1d26d503e5954aa6501c18d8282f6", "StartLine": 415, "EndLine": 415, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/mapcontextmenu/editors/PointEditorFragmentNew.java", "RecommendationId": "30e970eec3d0049d4485fb48f4547bba209b9e5e395f3981801363546ffda18e", "StartLine": 718, "EndLine": 718, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at lines 719, 721. The resource is closed at line 722. There are other execution paths that do not contain closure statements, for example, when InputStream.read throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "31282351b61e5b4fc2283b75b5cc6846d1fcb4f9c24bcfbf303c5174418328b1", "StartLine": 59315, "EndLine": 59315, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/IncrementalChangesManager.java", "RecommendationId": "33b6c1ebe4c0c8a6e17828c3c644abef80028ccae262854826d11623474e59e9", "StartLine": 88, "EndLine": 88, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/TileSourceManager.java", "RecommendationId": "34bc90eed6a267c642be69ba4fc9b091ddb0bce38e451b495c79dd20921a7e11", "StartLine": 557, "EndLine": 557, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. The resource is referenced at lines 556, 558. The resource is closed at line 560. There are other execution paths that do not contain closure statements, for example, when BufferedReader.readLine throws an exception. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/Algorithms.java", "RecommendationId": "355ad7ba6686caf3891407d1ae61e43ea041bebc7e358e77ce272b9accf5dbd1", "StartLine": 859, "EndLine": 859, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fin*. The resource is referenced at lines 860, 863. The resource is closed at lines 869, 870. There are other execution paths that do not contain closure statements, for example, when BufferedReader.readLine throws an exception. Ensure *fin* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "36eabe3b25f70b92ab76147d4a9b405cdd3b7d73c026e4bb0bad19f4fab5fd83", "StartLine": 4632, "EndLine": 4632, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/AnimateDraggingMapThread.java", "RecommendationId": "373a2ff7dc2ddca0a5532359f860768873054d23a475cf08aee719ad139f837e", "StartLine": 321, "EndLine": 321, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadFileHelper.java", "RecommendationId": "379a37c6937a82e95959ef0fb14806c6442b7f1d66566835c65d04d788221640", "StartLine": 259, "EndLine": 259, "Description": "**Problem**\nAnalysis of this package determined that this line of code contains a resource that might not have closed properly. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *fin*. The resource is referenced at lines 260, 273, 275, 276, 281, 284, 309. The resource is closed at lines 311, 313. There are other execution paths that do not contain closure statements, for example, when FileOutputStream constructor (in method copyFile) throws an exception.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "380b0b5dce54d96409affb3415e6334938f86021e126fbb35b2e8df2ae7a51bc", "StartLine": 20828, "EndLine": 20828, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/helpers/FontCache.java", "RecommendationId": "38c982b364a1da632e8c7aae9828a5d188375b56aaea32fde5edb6fd8e1207b3", "StartLine": 25, "EndLine": 37, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `get()`, `null` check, and `put()` may not be thread-safe at lines: **25, 26, and 37**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and returns that reference to its caller at line: **38**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "395613513f1905a823aa5218132d1d8bcc526cc04f377b03427bdd0d3e2f9c65", "StartLine": 35212, "EndLine": 35212, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "399c958d5a8d699a44827088a20b5108db2eba39f7656f314ba4b2528bbd44f0", "StartLine": 19103, "EndLine": 19103, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/wikivoyage/search/WikivoyageSearchHelper.java", "RecommendationId": "3ba0376caf1448fcf4daa4afa1a1755dedbbf04a17cba7022a660c21c2e0a8d5", "StartLine": 50, "EndLine": 50, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd/src/net/osmand/plus/render/MapRenderRepositories.java", "RecommendationId": "3c1175dd16031eabb5a795ccd4251782169eee408a2c2d70612c08b400071b6b", "StartLine": 497, "EndLine": 497, "Description": "This code uses '%s' to format int: zoom (declared at line 407). This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 497. Consider formatting this data with '%d' instead."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "3c5a97d67c1eb8f00460a49ce40defa3e60bba596e38fecf3e58fd082f8aed2f", "StartLine": 5363, "EndLine": 5363, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessageLite.java", "RecommendationId": "3d351afa0afd3076e2c6fd810faf3d944da4a9d1bc0ab7caecdcc32bedf3d48c", "StartLine": 173, "EndLine": 173, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/FavouritesDbHelper.java", "RecommendationId": "3d9b8e4552c64f7f1db6a692e98f42d121a7db3dc7153b537ce77f201d8d722c", "StartLine": 395, "EndLine": 417, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `get()` and `put()` may not be thread-safe at lines: **395, 398, and 417**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and uses that reference at line: **418**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/UnknownFieldSet.java", "RecommendationId": "3e70df56f89b7a756ecbd9dca2f0daa5f623416527111f83f69c690c8664d3c1", "StartLine": 598, "EndLine": 598, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "3e8176f8bbeb499d2a8a736688cde90f3e745ce46ff06f79aea0fe961d2da58b", "StartLine": 2686, "EndLine": 2686, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/GeneratedMessageLite.java", "RecommendationId": "3eef0c9b8e934106d370045f118d7c52394630e12942e37d8cd7398164848cbd", "StartLine": 780, "EndLine": 780, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "RecommendationId": "42cc9c87e35c958bf1cd407ce20906d53c38682fa3c2bec48cf92449b515d942", "StartLine": 285, "EndLine": 285, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource returned by the following method call: *getResourceAsStream*. Currently, there are execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure the object returned by *getResourceAsStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/settings/backend/backup/StreamSettingsItemWriter.java", "RecommendationId": "44710e6b09f103b31c12bd7ec2ea6783881f5330acf4baa3d1dd139903344ae1", "StartLine": 20, "EndLine": 20, "Description": "**Problem**\nAnalysis of this package determined that this line of code contains a resource that might not have closed properly. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *is*. The resource is referenced at lines 21, 24. The resource is closed at line 30. There are other execution paths that do not contain closure statements, for example, when InputStream.read throws an exception.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/mapwidgets/MapInfoWidgetsFactory.java", "RecommendationId": "4660b9c073b5cda41da2de1e18c090a3f4bfcda9c3e18f25083f140ca44299a8", "StartLine": 83, "EndLine": 83, "Description": "This class references 97 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "47eec3db3f44047477d37d4f15534a6d7d3443c5b37f0de24edda9b9545b915f", "StartLine": 4505, "EndLine": 4505, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/render/MapRenderRepositories.java", "RecommendationId": "48106a4a51f12340a703b471c3af82d45b06d2fccf3684cd1ccc41c4c807f9a8", "StartLine": 301, "EndLine": 301, "Description": "This code uses '%s' to format int: zoom (declared at line 279). This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 301. Consider formatting this data with '%d' instead."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/BinaryMapIndexReader.java", "RecommendationId": "48b63095dc83462a498d92c2411c4cc4af2aa1b495e992b09a7ba2a20b719c84", "StartLine": 2182, "EndLine": 2182, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the following resource: *raf*. Currently, there are execution paths that do not contain closure statements, for example, when an else condition at lines 2191, 2204, 2200, 2188, 2197, 2194 evaluate to true. Ensure *raf* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "49654eadeacfb0a4f632fea3ca72cd5064386e06a1a66210b5b2a0e25d33bb26", "StartLine": 22696, "EndLine": 22696, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/AnimateDraggingMapThread.java", "RecommendationId": "4a03467e98945a25961a766ddff60d08660adbd5996fc825d6ba33f5d4dd900a", "StartLine": 291, "EndLine": 291, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/oauth/OsmAndJDKHttpClient.java", "RecommendationId": "4d829150410108a0d3eaee9f379baf34d85db23d8ec53edcfdf1ee041768ddcf", "StartLine": 213, "EndLine": 213, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *bis*. The resource is referenced at lines 213, 215. The resource is closed at line 218. There are other execution paths that do not contain closure statements, for example, when OutputStream.flush throws an exception. Ensure *bis* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/data/Amenity.java", "RecommendationId": "4e450830baf8b17097c49a4f0ce15f3c47cdc7b59c6331cc67ceae99281682d6", "StartLine": 168, "EndLine": 168, "Description": "**Problem:**\n This line of code lacks validation when processing input data through the following parameter: 'value' (index: 1 | type: String). The parameter is exposed to external callers, because its enclosing class and method are publicly accessible. This means that upstream validation, if it exists, can be bypassed. Other validated parameters: 'tag'. The same parameter type is validated here for example: OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessage.java:791. Malicious, malformed, or unbounded inputs can cause unexpected runtime behavior or crashes, and can slow performance.\n\n**Fix:**\n Add checks to ensure the validity of the parameter's value, such as testing it for nullness (for example, using the @NonNull annotation as [described in the Lombok library](https://projectlombok.org/features/NonNull)), emptiness, or equality. Or to prevent direct calls to it, reduce the method's visibility.\n\nLearn more about potential threats and guidance from the [Common Weakness Enumeration website](https://cwe.mitre.org/data/definitions/693.html) and the [OWASP Cheat Sheet series](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "4f08829b50b188af6a7e0111ff368e263b2cc99d82cbfa300a7ba6c8ed72a971", "StartLine": 47703, "EndLine": 47703, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/mapillary/MapillaryAutoCompleteAdapter.java", "RecommendationId": "4ffd4b16a90680f84b82a5803176863a6e031fdbccecb96021dc766fffe55f31", "StartLine": 107, "EndLine": 107, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "5165e22536fa17381c3d5e8ca9ff2c5534e081af0b2d77d0200714842331145b", "StartLine": 21641, "EndLine": 21641, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/Algorithms.java", "RecommendationId": "51d8db87858ccf8c0625755dc32c9f9ee430fae797bbae23936a78e0c392433e", "StartLine": 860, "EndLine": 860, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *reader*. The resource is referenced at lines 860, 863. The resource is closed at lines 869, 870. There are other execution paths that do not contain closure statements, for example, when BufferedReader.readLine throws an exception. Ensure *reader* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "528a5b43790af810b4fdfc0ef9384ecd5bb31e4fc5e2ff4d2f075bb5b56a5711", "StartLine": 48396, "EndLine": 48396, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/mapwidgets/LanesControl.java", "RecommendationId": "52f7af837d1847f5f7c2c087838bd1466e23731ccf998a6dc2a2585c14a44a72", "StartLine": 64, "EndLine": 64, "Description": "The cyclomatic complexity of this method is 35. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd/src/net/osmand/aidl/OsmandAidlApi.java", "RecommendationId": "5367f047d187210408b1f8d8150a1ee99561484470bc960bb04178cde9a3fd0f", "StartLine": 2177, "EndLine": 2178, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `containsKey()` and `put()` may not be thread-safe at lines: **2177 and 2178**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and uses that reference at line: **2179**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/render/RenderingRulesStoragePrinter.java", "RecommendationId": "54472baf1a2e87c7bcf2f9d3ffde3a9c683017f02dd1826dc09d988b8d9631d2", "StartLine": 62, "EndLine": 62, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource returned by the following method call: *getResourceAsStream*. Currently, there are execution paths that do not contain closure statements, for example, when RenderingRulesStorage.parseRulesFromXmlInputStream throws an exception. Ensure the object returned by *getResourceAsStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/org/openplacereviews/opendb/ops/OpObject.java", "RecommendationId": "54afe92f8358c0d18b287d5949179dfb7b74021dc478318d5e19b2c1b997cdde", "StartLine": 110, "EndLine": 110, "Description": "**Problem**: Iterating over [map.keySet()](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#keySet--) and calling [map.get(Key)](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#get-java.lang.Object-) to get the values within the loop is inefficient. \n**Fix**: Iterate over [map.entrySet()](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#entrySet--) and access the values using [entry.getValue()](https://docs.oracle.com/javase/8/docs/api/java/util/Map.Entry.html#getValue--) to avoid potential performance penalty due to lookup."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "55498aa030f79d95bdd93e3cfd29dc0a5a8490bdfc9aec7881d54e3ca172997f", "StartLine": 17223, "EndLine": 17223, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/api/FileSettingsAPIImpl.java", "RecommendationId": "5630cb74f9e3548a5f8749b422a21ed05de38f0d9c250f094a2b57adebc4ff8b", "StartLine": 26, "EndLine": 26, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the following resource: *fis*. Execution paths that do not contain closure statements were detected. Ensure *fis* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "5668a97cca4fd11a01815253a312e72d7e954c98cb4c64a3019b8738c36d659a", "StartLine": 7548, "EndLine": 7548, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/VectorTile.java", "RecommendationId": "571f2dd6af1046c03231515f4d3d4d8ccbd5b5817b4df40b8d01fe6914b6698c", "StartLine": 1490, "EndLine": 1490, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "RecommendationId": "579d65fec34f19c353c293440ded66a556eb1e30f4f7b0fc9a82464c5e2776d5", "StartLine": 343, "EndLine": 343, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 347. The resource is closed at line 506. There are other execution paths that do not contain closure statements, for example, when XmlPullParser.setInput (in method initFromInputStream) throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/Algorithms.java", "RecommendationId": "5834c79b50d82b12b94ffe10a5ad92e10d535c8a18054458959f40228d5fb809", "StartLine": 319, "EndLine": 319, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *in*. The resource is referenced at line 320. The resource is closed at line 321. There are other execution paths that do not contain closure statements, for example, when an if condition at line 356 evaluates to true. Ensure *in* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/UnknownFieldSet.java", "RecommendationId": "58d7e217290cac23ae06dfd5c88482b8a7478cdd37fd346339d5c2fbb371c854", "StartLine": 535, "EndLine": 535, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/dashboard/DashChooseAppDirFragment.java", "RecommendationId": "59361be6fb834bd3b68240356e330a942b05cb485a6f374bc82ea3b9529bd0d5", "StartLine": 586, "EndLine": 586, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fin*. The resource is referenced at line 590. The resource is closed at line 597. There are other execution paths that do not contain closure statements, for example, when FileOutputStream constructor throws an exception. Ensure *fin* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessageLite.java", "RecommendationId": "5acd5eee5a3e1a3203b923fcaf5b0ea8b621011cb8cc1c1bb7d432c547560e12", "StartLine": 199, "EndLine": 199, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/importfiles/ImportHelper.java", "RecommendationId": "5c920a7bff4141754b78aa75273dcd71c3bb530191c40a9559f1ba0ea7b3910d", "StartLine": 218, "EndLine": 218, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *returnCursor*. The resource is referenced at lines 219, 220, 222, 229. The resource is closed at line 230. There are other execution paths that do not contain closure statements, for example, when Cursor.moveToFirst throws an exception. Ensure *returnCursor* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "5da98443e1f4013d613c60684e082d898ffe4994ab1673804063feb5f4c3498b", "StartLine": 49111, "EndLine": 49111, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/RouteDataObject.java", "RecommendationId": "5e74ee56e151a2fe5368b5d4e7d7c884717341fa60ded77a152fbc6f13f5d8e1", "StartLine": 247, "EndLine": 266, "Description": "Similar code fragments were detected in the same file at the following lines: 247:266, 281:300.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractParser.java", "RecommendationId": "5e7e956236351429fdb4523e9ebada24641bf4d4f5c0ffc40d745a2594bb09ff", "StartLine": 111, "EndLine": 111, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "5f1273bce032cdc42549c03fa2009946a6632bcaee3d3c8e431b8311dc676f65", "StartLine": 8905, "EndLine": 8905, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/TileSourceManager.java", "RecommendationId": "612c3a1aad9edcc0c85d9074430cc4f204fdc95326d98f348b2f5c624ce4975c", "StartLine": 520, "EndLine": 520, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *writer*. The resource is referenced at lines 520, 522. The resource is closed at line 524. There are other execution paths that do not contain closure statements, for example, when Writer.write throws an exception. Ensure *writer* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/OsmandApplication.java", "RecommendationId": "61a85d3a14152664050ee7ce4f9ed15a550691b235e854d92f0dc4210d0f9c72", "StartLine": 247, "EndLine": 247, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/AnimateDraggingMapThread.java", "RecommendationId": "6249fff0af084ecf31719fedbccc0e630dd834ab985da0918d9180baff5e7e21", "StartLine": 423, "EndLine": 423, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "65c5006a7934e011d213642406aaa09570d85f7cc96ab6e42573aba012b3b5f0", "StartLine": 11376, "EndLine": 11376, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/io/NetworkUtils.java", "RecommendationId": "665f09a833a1031c83157d18619afe2eb2e286e22c91b7e3dc7729329aa805e2", "StartLine": 39, "EndLine": 52, "Description": "Similar code fragments were detected in the same file at the following lines: 39:52, 84:97, 182:195.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "66ce188646c93a16915d8223927a55ec7d4301256f662328b23c1e2fd0b926c9", "StartLine": 7293, "EndLine": 7293, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "RecommendationId": "66f72a0c1ea123cf15d2a67e0a9ef13419d96e0dec1bd628c3d4357911bf9aac", "StartLine": 178, "EndLine": 178, "Description": "This code uses '%s' to format int: 'size' expression. This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 178. Consider formatting this data with '%d' instead."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadFileHelper.java", "RecommendationId": "675baf22e0161765e6ee7a44a16907ddf52e5d7ba0a0c3c18419f7128f3a0154", "StartLine": 281, "EndLine": 281, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *zipIn*. The resource is referenced at lines 260, 273, 275, 276, 281, 284, 309. The resource is closed at lines 311, 313. There are other execution paths that do not contain closure statements, for example, when FileOutputStream constructor (in method copyFile) throws an exception. Ensure *zipIn* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/SQLiteTileSource.java", "RecommendationId": "67fe909fa69ce4a885830172034e2bbb3451e8e662755cfed3077f822b1dcd50", "StartLine": 547, "EndLine": 547, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 550. The resource is closed at line 555. There are other execution paths that do not contain closure statements, for example, when FileInputStream.read throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/mapcontextmenu/editors/FavoritePointEditorFragment.java", "RecommendationId": "6958d6ca49242555ca33d664f6f39a8e45094bf4d077303e5c02dfc7f2c18fa5", "StartLine": 51, "EndLine": 51, "Description": "**Problem**\nAnalysis of this package determined that this line of code might contain a resource leak. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the resource returned by the *getContextMenu* method in a try-finally block. Execution paths that do not contain closure statements were detected.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "6ac3aa0b34ff20c955d03c1b2bb731be3dfbe48dc14b1dec4f82c60b1002d46f", "StartLine": 6266, "EndLine": 6266, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/io/NetworkUtils.java", "RecommendationId": "6b0fde7b594f86d1fb9d60233ddfc1c1769ebcdab5041a1e8f97794e5ab463e5", "StartLine": 160, "EndLine": 160, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *bis*. The resource is referenced at lines 160, 164, 168. The resource is closed at line 172. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *bis* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/base/MapViewTrackingUtilities.java", "RecommendationId": "6bc7f1787fde3236d6b0dac401227f9a71fe6894b59637ed05b46654a74e1866", "StartLine": 385, "EndLine": 385, "Description": "The SimpleDateFormat object was created without setting the time zone. Make sure that you want to use the default time zone or use letter z, Z or X in the pattern. Otherwise, if you do not call setTimeZone() on the created SimpleDateFormat object, you might get an unexpected date and time when using the object."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/RopeByteString.java", "RecommendationId": "6da9d5b3414ddd0769d42ee8a226fc5edc6766675fd779b4710407da205d13ce", "StartLine": 570, "EndLine": 570, "Description": "**Problem**\nAnalysis of this package determined that this line of code might contain a resource leak. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the resource returned by the *RopeInputStream* constructor in a try-finally block. Execution paths that do not contain closure statements were detected.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/jwetherell/openmap/common/MGRSPoint.java", "RecommendationId": "6eadc2f0b1feedec09f802854636682320caf5afe522568dbbabd2be612dd96c", "StartLine": 227, "EndLine": 233, "Description": "Similar code fragments were detected in the same file at the following lines: 227:233, 275:281.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/Algorithms.java", "RecommendationId": "6ee330ce9c47562dd0f5fc008445f439de04bdeee205e9cf8d69c30cc2b4c737", "StartLine": 878, "EndLine": 878, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 881. The resource is closed at line 904. There are other execution paths that do not contain closure statements, for example, when PlatformUtil.newXMLPullParser throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/LocationParser.java", "RecommendationId": "707f882d79ff17f86f9be27192d6ebdf23f38df312a343a7fdea624cad43164f", "StartLine": 94, "EndLine": 94, "Description": "The cyclomatic complexity of this method is 62. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd/src/net/osmand/aidl/ConnectedApp.java", "RecommendationId": "747b48a8cc79da70d51afadc11dc471d5fd4488d28812b649bd40555f4c1bffb", "StartLine": 280, "EndLine": 283, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `containsKey()` and `put()` may not be thread-safe at lines: **280 and 283**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and uses that reference at line: **286**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "RecommendationId": "750497da11f8dd2cafc0c85e2912b04a114a3459b3debcdaa3b1b7fdb50c1067", "StartLine": 200, "EndLine": 200, "Description": "This code uses '%s' to format int: 'size' expression. This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 200. Consider formatting this data with '%d' instead."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/render/RenderingRulesStorage.java", "RecommendationId": "7516c3a4340672defbaa218da6ef59f1e8c0dafe63fa05296200ac647c14fb34", "StartLine": 257, "EndLine": 261, "Description": "It seems unusual to set the value of a variable only when it is already set. You might want to switch the null check of == on line 257 to != check before setting the field value on line 261 or verify if the check is needed at all."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "755be2b01143ea1765305bbbef3dc5ff8a0ed753b6334426e94d98755a0e6c1e", "StartLine": 298, "EndLine": 298, "Description": "\n\n**Problem**  \n This line may not be thread-safe: **298**. At this line the following field is not protected by synchronization: `tilesCacheList`. Your code typically protects this field with synchronization on object: `ResourceManager.this`.\n\n**Fix**  \n Consider protecting the above field with synchronization on object: `ResourceManager.this`. For example, like at lines: **1223** and **1250**.\n\n**More info**  \n The following lines are where the above field is already protected by synchronization on the above object: **1123**, **1223**, and **1250**."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "76100fe7e4020eb0f0cc47d89178527118ed63224deab6a7a4a582bdb669a150", "StartLine": 61444, "EndLine": 61444, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "785fe1b615c754733290d4d71d60d0f14f12a84bb15a5d63c29e7dcd4b544cad", "StartLine": 4411, "EndLine": 4411, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/TileSourceManager.java", "RecommendationId": "793548f1a0baf885ea44d15a32516f7d73ff281f0f34430582299756c9b75819", "StartLine": 451, "EndLine": 451, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. The resource is referenced at lines 450, 454. The resource is closed at line 463. There are other execution paths that do not contain closure statements, for example, when BufferedReader.readLine throws an exception. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "79d6baefdcd7e9f982f2e9ec3a663a350eadbe0ab37f8d6a6f62edd4418e322f", "StartLine": 6056, "EndLine": 6056, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/oauth/OsmOAuthAuthorizationClient.java", "RecommendationId": "7afed4a1d472d7c78350b4ca23b4739563932c8b4adb6732cac2c024735e41f6", "StartLine": 137, "EndLine": 137, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/com/jwetherell/openmap/common/MGRSPoint.java", "RecommendationId": "7c9676d3b8e2731c1e29c6e1d0d9478fac01d7a7605e53645268e44bb20d9a30", "StartLine": 722, "EndLine": 728, "Description": "Similar code fragments were detected in the same file at the following lines: 722:728, 729:735.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "7cc816672f4e4c2985f765bff6eadb8881443788d6576d26dbd500b6fe87a84a", "StartLine": 3307, "EndLine": 3307, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "7d3e17305d6751feef672ad192b54a244c5c8b842a23a627525e8e9d568655a7", "StartLine": 25143, "EndLine": 25143, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/layers/ContextMenuLayer.java", "RecommendationId": "7dcfecdd0b9f2faba1efa9188cfa6c819c51a156726b1bcb9166f2118c72316f", "StartLine": 91, "EndLine": 91, "Description": "This class references 99 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd/src/net/osmand/plus/api/FileSettingsAPIImpl.java", "RecommendationId": "7ea8143170af22df842a11ea01aa887c28f0876ba03a21bb9ae3cfcddf2182dc", "StartLine": 184, "EndLine": 193, "Description": "\n\n**Problem**  \n You are using a `ConcurrentHashMap`, but your usage of `get()`, `null` check, and `put()` may not be thread-safe at lines: **184, 185, 188, and 193**. Two threads can perform this **same check at the same time** and one thread can **overwrite** the value written by the other thread.\n\n**Fix**  \n Consider replacing `put()` with `putIfAbsent()` to help prevent accidental overwriting. `putIfAbsent()` puts the value only if the `ConcurrentHashMap` does not contain the key and therefore avoids overwriting the value written there by the other thread's `putIfAbsent()`.\n\n**More info**  \n The thread whose value was overwritten still has a reference to that value and returns that reference to its caller at line: **194**. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "7f751fb24a1af42c48dd42f050e268c64f30d1174bac06ce3c34ce8879484b3b", "StartLine": 21767, "EndLine": 21767, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "7f8653bb6828db3beadb24f49789f16b4f94fa7927664396d5eab81e0e584b64", "StartLine": 32844, "EndLine": 32844, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/myplaces/TrackPointFragment.java", "RecommendationId": "807baa769c28c5882e92df831e04b27438f5bceed4bb4e05035164603276a100", "StartLine": 91, "EndLine": 91, "Description": "This class references 104 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadFileHelper.java", "RecommendationId": "8086c4c410a2081812c55266f23c45f069516281335733506701b05a1526cae5", "StartLine": 244, "EndLine": 244, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at lines 245, 247. The resource is closed at line 248. There are other execution paths that do not contain closure statements, for example, when InputStream.read throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/Renderable.java", "RecommendationId": "80d2dfa5022acb2f222dc5b02ee84f3bdf3966dde423cc78946e53620154d9a4", "StartLine": 134, "EndLine": 134, "Description": "**Problem**\nAnalysis of this package determined that this line of code might contain a resource leak. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *path*. Currently, there are execution paths that do not contain closure statements, for example, when an else condition at line 157 evaluates to true.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "836aa816ffc9da63b24afa77fe2d77cad3e4ea9e11b26533e64d4a801af35841", "StartLine": 3974, "EndLine": 3974, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/BinaryMapIndexFilter.java", "RecommendationId": "84e3804260efffade733cf80f729d9ffda364a6494b1d3c1b569d41f42699257", "StartLine": 29, "EndLine": 29, "Description": "**Problem**\nAnalysis of this package determined that this line of code assigns a resource to a class field and there is no method that closes or returns this resource. This can result in a resource leak that slows down or crashes your system.\n\n**Fix**\nCreate a method in this class that closes the following resource: *reader*. After you use this resource, use this method to prevent a resource leak.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/mapmarkers/adapters/MapMarkersListAdapter.java", "RecommendationId": "856379dbb8b83db679fa0319b4ec1d4828c8ae9d29cedc738851d2a2d2007c13", "StartLine": 87, "EndLine": 87, "Description": "The cyclomatic complexity of this method is 47. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd/src/net/osmand/plus/voice/JSTTSCommandPlayerImpl.java", "RecommendationId": "85773210650f88904ab0dbfcc7477d73f56b16475eec221fdeff728db2a87c3a", "StartLine": 30, "EndLine": 30, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *br*. The resource is referenced at lines 30, 33. The resource is closed at line 34. There are other execution paths that do not contain closure statements, for example, when Context.evaluateReader throws an exception. Ensure *br* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/voice/JSTTSCommandPlayerImpl.java", "RecommendationId": "857ef64a9def5dafdcfbd4068de71f39460d45a342b91e024642cc1338610c40", "StartLine": 32, "EndLine": 32, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileReader*. The resource is referenced at lines 30, 33. The resource is closed at line 34. There are other execution paths that do not contain closure statements, for example, when Context.evaluateReader throws an exception. Ensure the object returned by *FileReader()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/TilesCache.java", "RecommendationId": "85fa663824add6daf7a3f9d7b77385bf5502c72ba06502f2a37ab5a7c0e152b9", "StartLine": 126, "EndLine": 126, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd-java/src/main/java/com/jwetherell/openmap/common/GreatCircle.java", "RecommendationId": "868417e04f885f3508f710097ea82eb3e6ae96832a68fa204d4aa23526606d79", "StartLine": 181, "EndLine": 191, "Description": "Similar code fragments were detected in the same file at the following lines: 181:191, 295:305.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "879922b34a0e90c0195ecd15a3ac2b54b8f936c1924f6a075d4747850a8d854c", "StartLine": 20015, "EndLine": 20015, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/BinaryMapIndexReader.java", "RecommendationId": "8810e2bee85e4f30506ef2ce8f45510fae7ceb3e21d3fa6998e2a25238847761", "StartLine": 659, "EndLine": 659, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/IncrementalChangesManager.java", "RecommendationId": "88e3f69d5701d5c1106e8289ef6ed18835e148b54a6cb5bf1ae6fe45e35b31cc", "StartLine": 125, "EndLine": 128, "Description": "\n\n**Problem**  \n These lines use `ConcurrentHashMap`'s **sequential** API and are protected by `synchronized` to ensure they execute together: **125 and 128**. This synchronization may reduce performance by limiting parallelism and does not take advantage of `ConcurrentHashMap`'s **concurrent** API.\n\n**Fix**  \n Consider replacing the check and `put()` with `putIfAbsent()` and then removing the synchronization. The check is at line: **126**.\n\n**More info**  \n `putIfAbsent()` is thread-safe and puts the value only if the `ConcurrentHashMap` does not contain the key. `putIfAbsent()` returns `null` if the value did not exist and returns the value in the map if one already exists.\n\n [View an example on GitHub](https://github.com/apache/hadoop/blob/f16cf877e565084c66bc63605659b157c4394dc8/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java#L927-L932) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/layers/RouteLayer.java", "RecommendationId": "8c0d9c25d548bdde091fe3a8bc7a6c506674f08084a606e7bbaf96a44fb493a4", "StartLine": 274, "EndLine": 274, "Description": "**Problem**\nAnalysis of this package determined that this line of code might contain a resource leak. A resource leak can slow down or crash your system.\n\n**Fix**\nConsider closing the following resource in a try-finally block: *pth*. Execution paths that do not contain closure statements were detected.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/UnknownFieldSet.java", "RecommendationId": "8c6c9e35759b387c6cd60df981e2cc28c9a970c0f2930cfb92d578fca31c90ee", "StartLine": 514, "EndLine": 514, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "8c740d150f83316e8b2e6faf316f60bc0cc76f7dad217def1291a298e27e04d2", "StartLine": 59145, "EndLine": 59145, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "8cd55c0df0367450e61ab837e4b525bbab8abb1f3cf94c4003987a04a62a1328", "StartLine": 10537, "EndLine": 10537, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "8d2c6d3c7313b147eee7f171d33f6e6c9e08ada239cce9bb73976de530b2cd9f", "StartLine": 29725, "EndLine": 29725, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/Algorithms.java", "RecommendationId": "8d555583b0d719459836981c37968ba023953df67b32cf97275ebff4031640e3", "StartLine": 845, "EndLine": 845, "Description": "**Problem**: An equality operator (== or !=) is used to compare strings, which matches strings based on address.\n\n**Fix**: Do content comparison using the equals() method to compare the values of the strings."}, {"FilePath": "OsmAnd/src/net/osmand/plus/voice/JSMediaCommandPlayerImpl.java", "RecommendationId": "9158a1044d0bddc371b257628b09be88a3ee442865e68ebea5e9058baed1b4bd", "StartLine": 37, "EndLine": 37, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileReader*. The resource is referenced at lines 35, 38. The resource is closed at line 39. There are other execution paths that do not contain closure statements, for example, when Context.evaluateReader throws an exception. Ensure the object returned by *FileReader()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "91fe6155d6ebf6a9a523a0c72e1dbbf9d90d54c83a8f9da76c66c64d8b3f9ca7", "StartLine": 18951, "EndLine": 18951, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/IncrementalChangesManager.java", "RecommendationId": "933c70f09dee4f12134e577eafd8517a5d22e682c62ce31b6963e106484dc03d", "StartLine": 109, "EndLine": 109, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "945de7a481b09319b277c47dd28835dcf51a71b427c111b5fc7edf68eaf34bc7", "StartLine": 46111, "EndLine": 46111, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "945df8eecc9d02f9f41fd8841f75827879fd46d330921f7947aa5ec9077759a1", "StartLine": 52572, "EndLine": 52572, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "94b7a657ddb37929a716b779ad57a11b72270909ba2b3c10aa6b76b960f4db08", "StartLine": 40412, "EndLine": 40412, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/jwetherell/openmap/common/ZonedUTMPoint.java", "RecommendationId": "96a85e2fddb268c1de3572ac6e16c1379bd5d9e8bde4d2273a52dbd8ae68acfa", "StartLine": 76, "EndLine": 76, "Description": "The cyclomatic complexity of this method is 41. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "976291bd9bc29cc49b97b142dcfbb6f9186bd9aeb5e611e622ea59b53bbd550e", "StartLine": 318, "EndLine": 318, "Description": "\n\n**Problem**  \n This line may not be thread-safe: **318**. At this line the following field is not protected by synchronization: `tilesCacheList`. Your code typically protects this field with synchronization on object: `ResourceManager.this`.\n\n**Fix**  \n Consider protecting the above field with synchronization on object: `ResourceManager.this`. For example, like at lines: **1223** and **1250**.\n\n**More info**  \n The following lines are where the above field is already protected by synchronization on the above object: **1123**, **1223**, and **1250**."}, {"FilePath": "OsmAnd/src/net/osmand/plus/OsmAndLocationSimulation.java", "RecommendationId": "97def299884b6a80c34de6815709e2dad243ce7a94d4c7e32ef3fa1900b72884", "StartLine": 174, "EndLine": 174, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/RouteDataObject.java", "RecommendationId": "9942e05c5490835df18346027b5e6002bbec78bc6b98e69a05b9ba6bbafa775a", "StartLine": 71, "EndLine": 71, "Description": "The cyclomatic complexity of this method is 46. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadFileHelper.java", "RecommendationId": "9998db3fd89d360f29220beb48ed74e00828ddaeb673f65a118c518298a8b90f", "StartLine": 250, "EndLine": 250, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fos*. The resource is referenced at line 251. The resource is closed at line 252. There are other execution paths that do not contain closure statements, for example, when FileOutputStream.write throws an exception. Ensure *fos* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "99f7c915733350675481775032f9b64c6ba0c2e92d2decd0c34d29ee9318bf9f", "StartLine": 50027, "EndLine": 50027, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "9a2fcdb98d6bcfb41b850f130f9a837b20bf626256d1853e3089f02e64d2d9db", "StartLine": 39626, "EndLine": 39626, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadResources.java", "RecommendationId": "9b651bc543ad77b5fce3497c804e3cdea9ba75ec8721a85b48b288961f035368", "StartLine": 213, "EndLine": 213, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at lines 214, 215. The resource is closed at line 216. There are other execution paths that do not contain closure statements, for example, when InputStream.available throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadOsmandIndexesHelper.java", "RecommendationId": "9c287e4be66ef2e0709452e4cd8a268bf9747ede5fc7ab938f64da0e7661743c", "StartLine": 127, "EndLine": 127, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *isBundledAssetsXml*. The resource is referenced at line 128. The resource is closed at line 139. There are other execution paths that do not contain closure statements, for example, when XmlPullParser.setInput throws an exception. Ensure *isBundledAssetsXml* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/development/LogcatActivity.java", "RecommendationId": "9d839e2aca3e04a911381410e228ed0e530029ff72fa513bb31d477a282cd6f2", "StartLine": 238, "EndLine": 238, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *writer*. The resource is referenced at lines 238, 239. The resource is closed at line 240. There are other execution paths that do not contain closure statements, for example, when Writer.write throws an exception. Ensure *writer* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadFileHelper.java", "RecommendationId": "a0f383ff3b503361edfc3bf5e01d730539d4567aad8e8a79cbda2a3963763ec5", "StartLine": 275, "EndLine": 275, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *zipIn*. The resource is referenced at lines 260, 273, 275, 276, 281, 309. The resource is closed at line 313. There are other execution paths that do not contain closure statements, for example, when FileOutputStream constructor (in method copyFile) throws an exception. Ensure *zipIn* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/router/BinaryRoutePlanner.java", "RecommendationId": "a14066de4f4fcc9202a8f359e661f174ecb1d748701ff5072e997a1b4f1d807d", "StartLine": 1018, "EndLine": 1019, "Description": "It seems unusual to set the value of a variable only when it is already set. You might want to switch the null check of != on line 1018 to == check before setting the field value on line 1019 or verify if the check is needed at all."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "a33480e86f0b8ccaf2f38567343bb5ba8bef518aece7d51fbe28c1294b7e2fb2", "StartLine": 24658, "EndLine": 24658, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/AsyncLoadingThread.java", "RecommendationId": "a4a65f0c97ae815d3fa76b1f3d241fc1123f954f0561a8e561360c072cae88c8", "StartLine": 64, "EndLine": 64, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd/src/net/osmand/plus/render/RendererRegistry.java", "RecommendationId": "a8ab54c02c1de847935deb8b4bac7d74630b956ae39d630df3b18b7b0289722a", "StartLine": 221, "EndLine": 221, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fout*. The resource is referenced at line 222. The resource is closed at line 224. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fout* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/BinaryMapIndexReader.java", "RecommendationId": "a92b5b1b64e83ec00a2c6a81a1e6003732395c0557da3537681773326bbb3807", "StartLine": 2288, "EndLine": 2288, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. Execution paths that do not contain closure statements were detected. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "a95dbe05198b476954adf5a140582de623e48842ba0cb1c6362181342ced8c84", "StartLine": 531, "EndLine": 531, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource returned by the following method call: *getResourceAsStream*. Currently, there are execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure the object returned by *getResourceAsStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/MapRenderingTypes.java", "RecommendationId": "ab5ca95e0c1b29362deecbce180e795ee914c77a0a8c18f5bf043edc89b834e4", "StartLine": 226, "EndLine": 226, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 231. The resource is closed at line 248. There are other execution paths that do not contain closure statements, for example, when XmlPullParser.setInput throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "aef96c92e83e8ab5fe15b2c9ff2d35ddb56324fb899e993af3030b9f7115b857", "StartLine": 56745, "EndLine": 56745, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/Period.java", "RecommendationId": "af3b6cbd2ffe56ca08903168b773a03f3a09639d16aac024761a7ce74d085045", "StartLine": 111, "EndLine": 111, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "af3c77fa547273d481f0bc431e0bd986b4ea99a3ec96c0fde07de04c1f510988", "StartLine": 36674, "EndLine": 36674, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "b053146b80b4e62bbc57675a75b17e8dd7771dc94e14455d9339d5ed8acabc21", "StartLine": 23176, "EndLine": 23176, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/oauth/OsmOAuthAuthorizationClient.java", "RecommendationId": "b12941942ebb9b2902b706c675fde4fefc750c873eafaca6f9b3185898f67781", "StartLine": 150, "EndLine": 150, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "b12af31b2ebb423a261657a8c53ffe3b92379c5003b8669ecc78d1c6d4c0e6f4", "StartLine": 28751, "EndLine": 28751, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/mapwidgets/widgets/AlarmWidget.java", "RecommendationId": "b19997958575a3f521a03bd6b8c407e0a62dadafb3e4f01194e2737857ef8faf", "StartLine": 58, "EndLine": 58, "Description": "The cyclomatic complexity of this method is 48. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd/src/net/osmand/aidl/OsmandAidlApi.java", "RecommendationId": "b2d62070025b9f40865fd0c52019b86f4499d22486b8ba8a79a60c9f3cecb58a", "StartLine": 2568, "EndLine": 2568, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/util/GeoPointParserUtil.java", "RecommendationId": "b31178a2c7170ed3acda0426cb37a8c9f21c46b62c7ef75a28e76ea7d0704bb4", "StartLine": 729, "EndLine": 734, "Description": "Similar code fragments were detected in the same file at the following lines: 729:734, 738:743.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/oauth/OsmAndJDKHttpClient.java", "RecommendationId": "b5254d9d136f83f5d7b33a9d55a071ad84eb9d83f08bc3da8c985f8a1cbdb4ed", "StartLine": 204, "EndLine": 204, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *stream*. The resource is referenced at lines 213, 215. The resource is closed at line 218. There are other execution paths that do not contain closure statements, for example, when OutputStream.flush throws an exception. Ensure *stream* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "b55a13769d82e2023ed8297b0d2ed1f94fb81d1028753223d3a347511908a9ba", "StartLine": 13924, "EndLine": 13924, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/TileSourceManager.java", "RecommendationId": "b63c01d55f7d61bfac5dacd9af87f6dad71e1cb07431d795c3482c3233bcef48", "StartLine": 417, "EndLine": 417, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fis*. The resource is referenced at line 418. The resource is closed at line 419. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fis* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "RecommendationId": "b958dc7cbee572a160c4331c5b461a18fc0e933303b8fe7c0be09aeb1107f9e3", "StartLine": 286, "EndLine": 286, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileOutputStream*. Currently, there are execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure the object returned by *FileOutputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/BinaryVectorTileReader.java", "RecommendationId": "bad9b0b3e6867a7b92131591182bd5708746489a5beb122b66133de713f5a947", "StartLine": 20, "EndLine": 20, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource created by the following constructor: *FileInputStream*. Currently, there are execution paths that do not contain closure statements, for example, when MvtReader.loadMvt throws an exception. Ensure the object returned by *FileInputStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/OsmandRegions.java", "RecommendationId": "bed9601b6b153bfa3ad7b7439445b729d521402d13e4c5eb82c14add0422a92c", "StartLine": 798, "EndLine": 798, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/RouteDataObject.java", "RecommendationId": "bf11693cc66c9e9f45af87748e73c0a14416915c0b9eb628ae52342c5b182e7b", "StartLine": 733, "EndLine": 747, "Description": "Similar code fragments were detected in the same file at the following lines: 733:747, 751:765.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd/src/net/osmand/aidl/OsmandAidlApi.java", "RecommendationId": "c2d1cb0e3876397db9d5be95dcdb076b7df36c3c0ff402d062ee9110efed5621", "StartLine": 2537, "EndLine": 2537, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd/src/net/osmand/plus/OsmandApplication.java", "RecommendationId": "c57ccd9536778291687ce73bd23eb283fc91111793bab111498ab26c5f813f15", "StartLine": 600, "EndLine": 600, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd/src/net/osmand/plus/routing/TransportRoutingHelper.java", "RecommendationId": "c6b694605348ef9c89fcf98b237ba72f72a01e4a361b0d770e378f8b01a5c17d", "StartLine": 621, "EndLine": 621, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd/src/net/osmand/plus/helpers/ScrollHelper.java", "RecommendationId": "c7d382b0139e64d863deaacaf8383fc04937acccb30f1e6d12e6810d7a21a7f4", "StartLine": 39, "EndLine": 39, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "c8984f3f9575ad0935a3a2010844232856383bb469d339730cb4e4615cf174e8", "StartLine": 37798, "EndLine": 37798, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "c898aad2b42da65c3f2875d08ac9f254826ff3f50c5b66ed3282cc98a79044aa", "StartLine": 517, "EndLine": 517, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fout*. The resource is referenced at line 518. The resource is closed at line 519. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fout* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "c8c8cbb8c2a91c35c9edfaa263f7242d23513e6bb4c00a623bf767553fd7e796", "StartLine": 518, "EndLine": 518, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the resource returned by the following method call: *getResourceAsStream*. Currently, there are execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure the object returned by *getResourceAsStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/osmedit/OsmEditsFragment.java", "RecommendationId": "c8df939704bf1436a9ac400f37f940c7a3e5ce236a6879dc82607d5fcfa01e6f", "StartLine": 83, "EndLine": 83, "Description": "This class references 99 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "cb130e8ee47963136f7c5a3f743407ec1f57a99a4efbae8d2893e18cce010950", "StartLine": 6264, "EndLine": 6264, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/routing/RoutingHelperUtils.java", "RecommendationId": "ccc3076e4f8f1273f002b7fd75face00670fb2e3044611e9ce2ee183779211d2", "StartLine": 35, "EndLine": 35, "Description": "**Problem:**\n This line of code lacks validation when processing input data through the following parameter: 'towards' (index: 3 | type: String). The parameter is exposed to external callers, because its enclosing class and method are publicly accessible. This means that upstream validation, if it exists, can be bypassed. Other validated parameters: 'destination', 'ref', 'name'. The same parameter type is validated here for example: OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessage.java:791. Malicious, malformed, or unbounded inputs can cause unexpected runtime behavior or crashes, and can slow performance.\n\n**Fix:**\n Add checks to ensure the validity of the parameter's value, such as testing it for nullness (for example, using the @NonNull annotation as [described in the Lombok library](https://projectlombok.org/features/NonNull)), emptiness, or equality. Or to prevent direct calls to it, reduce the method's visibility.\n\nLearn more about potential threats and guidance from the [Common Weakness Enumeration website](https://cwe.mitre.org/data/definitions/693.html) and the [OWASP Cheat Sheet series](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/osmedit/oauth/OsmOAuthAuthorizationAdapter.java", "RecommendationId": "cce291ee0ae54debb3265ed36b4b7fbacb7fc8f8c009b9d16d0fba6ef1bb0fa0", "StartLine": 167, "EndLine": 167, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "ceaea017a1e5d24a96ae9f66df0b8f4e1fc1bfc731cde138140ccf3f6f315a20", "StartLine": 32037, "EndLine": 32037, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/settings/backend/OsmAndAppCustomization.java", "RecommendationId": "cf4e1b374ffef921be45d9ed676c7b10cabe82f83eeec6c12683093c02112089", "StartLine": 277, "EndLine": 277, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at lines 278, 289. The resource is closed at line 292. There are other execution paths that do not contain closure statements, for example, when FileOutputStream constructor throws an exception, and an if condition at line 284 evaluates to true. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "d109194fdcf5bf835e728fd9e82fa3bbb1c35984e7ccc8f76a06d3f2697e2b34", "StartLine": 8967, "EndLine": 8967, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "RecommendationId": "d27315453c2a9b05f3bafe149d64a84a783a19ce731366259a38ee154cb1e181", "StartLine": 152, "EndLine": 152, "Description": "This code uses '%s' to format int: 'size' expression. This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 152. Consider formatting this data with '%d' instead."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/LiteralByteString.java", "RecommendationId": "d4699a5df907a1f16f8d5dc82ab9331c24dedae48cfd701fd73f74f98b05d51d", "StartLine": 318, "EndLine": 318, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/activities/FavoritesTreeFragment.java", "RecommendationId": "d5b7bb4f3b931a3ec568a79524ebf47060d3d1d65ad17f501fe68e3990730a11", "StartLine": 78, "EndLine": 78, "Description": "This class references 98 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "RecommendationId": "d6073cd041117ae511f0b96c3b3abcecb89d05825c32e55f49a3487381a3a094", "StartLine": 293, "EndLine": 293, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "d6a5373ad6e5568d0d6f4b93cd160e62cb62786ddd0d81b89d8570b874d601a0", "StartLine": 530, "EndLine": 530, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fout*. The resource is referenced at line 531. The resource is closed at line 532. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fout* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/UnknownFieldSet.java", "RecommendationId": "d7d3f837cd46da2a1b9de671890b8d69fce6740323fe69637838f9c0652305c8", "StartLine": 966, "EndLine": 966, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/NativeLibrary.java", "RecommendationId": "d96c5fd49853680fd9c40848033362a2e95ea9379752e724f620cf0a0688e0a1", "StartLine": 251, "EndLine": 251, "Description": "**Problem:**\n This line of code lacks validation when processing input data through the following parameter: 'libBaseName' (index: 0 | type: String). The parameter is exposed to external callers, because its enclosing class and method are publicly accessible. This means that upstream validation, if it exists, can be bypassed. Other validated parameters: 'path'. The same parameter type is validated here for example: OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessage.java:791. Malicious, malformed, or unbounded inputs can cause unexpected runtime behavior or crashes, and can slow performance.\n\n**Fix:**\n Add checks to ensure the validity of the parameter's value, such as testing it for nullness (for example, using the @NonNull annotation as [described in the Lombok library](https://projectlombok.org/features/NonNull)), emptiness, or equality. Or to prevent direct calls to it, reduce the method's visibility.\n\nLearn more about potential threats and guidance from the [Common Weakness Enumeration website](https://cwe.mitre.org/data/definitions/693.html) and the [OWASP Cheat Sheet series](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/settings/datastorage/task/MoveFilesTask.java", "RecommendationId": "d983de5867c68f6f1fac82eacfb277ef6b83f5b40f57a9048868626ed54a84be", "StartLine": 139, "EndLine": 139, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fin*. The resource is referenced at line 143. The resource is closed at line 150. There are other execution paths that do not contain closure statements, for example, when FileOutputStream constructor throws an exception. Ensure *fin* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "db063ccc243ac9b2909c6cf8395b03bf121459ae0ace8c5d9dc9d598ecff14a0", "StartLine": 22557, "EndLine": 22557, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "db67b6e26965ca74eab42d9702354363f6c84e48abe4ca6003abc4aea9c09cac", "StartLine": 45962, "EndLine": 45962, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/AndroidUtils.java", "RecommendationId": "dd65eb41823e66eea8a4b5ffdbf9148ea8df829750860204579f96c6f9284828", "StartLine": 88, "EndLine": 88, "Description": "This class references 97 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd/src/net/osmand/plus/wikipedia/WikiArticleBaseDialogFragment.java", "RecommendationId": "de5c8246b68cdce80d73b23771666466d3c57ae5662127e9f8593188402ff77b", "StartLine": 124, "EndLine": 124, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *writer*. The resource is referenced at lines 124, 125. The resource is closed at line 126. There are other execution paths that do not contain closure statements, for example, when Writer.write throws an exception. Ensure *writer* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessageLite.java", "RecommendationId": "dfe6d79a8d467055f7d238dc6aeac6a629db374cab2686ded95507d138525a3e", "StartLine": 150, "EndLine": 150, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractParser.java", "RecommendationId": "e0fb16c8ca679ef1e0fe9ce0968ba8dc0f64a940dd8ca7c08a8839799007764d", "StartLine": 148, "EndLine": 148, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/wdtinc/mapbox_vector_tile/adapt/jts/MvtReader.java", "RecommendationId": "e271bb8345fd5680f9f4b9070cbc1d26dbd6f6d4e244a4e2b81e4bc583fa6395", "StartLine": 309, "EndLine": 320, "Description": "Similar code fragments were detected in the same file at the following lines: 309:320, 408:419.  \nRefactoring can help improve code maintainability. Consider reducing duplicate code by extracting it into a separate method. You can then replace duplicated code with calls to this new method."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandIndex.java", "RecommendationId": "e2f256947f7af84506cd765328eb32efd3154d85190af924a3f42f28f1b75e40", "StartLine": 8030, "EndLine": 8030, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "e3bc919c75fd0c1aee695d1e619fce5bce22d85f73d58c4639ef44a8f4a0fb31", "StartLine": 1201, "EndLine": 1201, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/FavouritesDbHelper.java", "RecommendationId": "e52f757cc44985ea1e89afffbb7b5b57f03446ff8b8c8f5c76aaf9690c1438e8", "StartLine": 575, "EndLine": 575, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fis*. The resource is referenced at line 576. The resource is closed at line 577. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fis* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/osm/io/NetworkUtils.java", "RecommendationId": "e6350bbe06062c91cb45924c279be1a8a8412ca0d74f079bf5bf92281dcc13ab", "StartLine": 159, "EndLine": 159, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fis*. The resource is referenced at lines 160, 164, 168. The resource is closed at line 172. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fis* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/osmedit/EditPoiDialogFragment.java", "RecommendationId": "e676b319fccd4e56786e1d1edb0ca5047a5a20e98a235a6e6543890c4e979b60", "StartLine": 95, "EndLine": 95, "Description": "This class references 122 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "e7e4afcd91e7ba820b3f15e06591f1370a2dbfce6c1348f21178f47b0fa8a1c2", "StartLine": 15855, "EndLine": 15855, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "e83571c38ee47d723c8803ac66daa13aed99b2086d99a4a3ef0cef6dcbeaf2f4", "StartLine": 11319, "EndLine": 11319, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "e8a5d2510122aeedaf82b55e21a9a7b21d3adbe9bac9df235d3932a9d8a7fab2", "StartLine": 33889, "EndLine": 33889, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/layers/MapControlsLayer.java", "RecommendationId": "e99b02c00467e8f0cde64a493467be389f32940721158df92864ff48517f8f51", "StartLine": 91, "EndLine": 91, "Description": "This class references 95 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "ea40f9023b3d97c4777386edbb2c91e50e9f74d590c4fb17a502da310fbbe4ef", "StartLine": 9498, "EndLine": 9498, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/router/TransportRoutePlanner.java", "RecommendationId": "ea570ef5e25fc802f12a7234bdf26201971fac8490bb1650f326c4587c160aa2", "StartLine": 33, "EndLine": 33, "Description": "The cyclomatic complexity of this method is 40. By comparison, 99% of the methods in the CodeGuru reference dataset have a lower cyclomatic complexity. This indicates the method has a high number of decisions and it can make the logic difficult to understand and test. We recommend that you simplify this method or break it into multiple methods."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DynamicMessage.java", "RecommendationId": "eb0e4c2ca006e74aedb9c052225ce1b908e6056450c198f1b19be90239758407", "StartLine": 256, "EndLine": 256, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/routepreparationmenu/RouteDetailsFragment.java", "RecommendationId": "ebdaf300539f3831ea19b416dbee20d5a07775e06d7c4646c6955ae07cc80a40", "StartLine": 90, "EndLine": 90, "Description": "This class references 97 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/OsmandRegions.java", "RecommendationId": "efc6cd118abbdba0ea8064f8abe37a8817bef06c1975012abac60766be348a28", "StartLine": 107, "EndLine": 107, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fous*. The resource is referenced at line 108. The resource is closed at line 109. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *fous* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/resources/ResourceManager.java", "RecommendationId": "eff88161fc4b3d8a8a96e1f26db80966639aee95cc0b6921935c6bb90c775c12", "StartLine": 588, "EndLine": 588, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *is*. The resource is referenced at line 590. The resource is closed at line 592. There are other execution paths that do not contain closure statements, for example, when Algorithms.streamCopy throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/map/TileSourceManager.java", "RecommendationId": "f1219f04d91755eeeff3c07a19bea8e236daf2fcae83bde53ca27bd5a43ffe9d", "StartLine": 450, "EndLine": 450, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *reader*. The resource is referenced at lines 450, 454. The resource is closed at line 463. There are other execution paths that do not contain closure statements, for example, when BufferedReader.readLine throws an exception. Ensure *reader* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/development/LogcatActivity.java", "RecommendationId": "f1991af3279570bf866c9378b5301657978304ed6f2629b0c356153df9bf221c", "StartLine": 230, "EndLine": 230, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd/src/net/osmand/plus/views/AnimateDraggingMapThread.java", "RecommendationId": "f1c46dd807680de98189fd24b6d4ab4204797e9b6d1a208408c587b0b2ff387b", "StartLine": 58, "EndLine": 58, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/VectorTile.java", "RecommendationId": "f2ab52ca8b02c13e691d1ff89b967d800e092e1146d1702f267dfb7c2c9ae034", "StartLine": 431, "EndLine": 431, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractParser.java", "RecommendationId": "f3acbe2b4d3bf7d8f779b56bf419cbd289cf61897bc961053dc4b24228256afa", "StartLine": 237, "EndLine": 237, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/router/RoutingConfiguration.java", "RecommendationId": "f46cffdfd79c82bf8836ef716f358c77c9c41e5e6cc1f2959e66a1ec013e3d3b", "StartLine": 183, "EndLine": 183, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the resource returned by the following method call: *getResourceAsStream*. The resource is referenced at line 183. The resource is closed at line 228. There are other execution paths that do not contain closure statements, for example, when XmlPullParser.setInput (in method parseFromInputStream) throws an exception. Ensure the object returned by *getResourceAsStream()* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/download/DownloadIndexesThread.java", "RecommendationId": "f5013285afebaf2b0f35d74b9c062eb837a06b4d441509406e64c81db8c6524e", "StartLine": 548, "EndLine": 548, "Description": "**Problem**: InterruptedException is ignored. This can delay thread shutdown and clear the thread\u2019s interrupt status. Only code that implements a thread\u2019s interruption policy can swallow an interruption request.\n\n**Fix**: Rethrow the InterruptedException or reinterrupt the current thread using *Thread.currentThread().interrupt()* so that higher-level interrupt handlers can function correctly.\n If you are wrapping the InterruptedException inside a RuntimeException, call *Thread.currentThread().interrupt()* before throwing the RuntimeException.\n\nLearn more about [interrupts](https://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html) and [dealing with InterruptedException](https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#N10187)\n"}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "f52d642b5c5970ee1a2b62929398b5b53797ce3573abaa32ac7e0242ff97b918", "StartLine": 42135, "EndLine": 42135, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/wdtinc/mapbox_vector_tile/adapt/jts/MvtReader.java", "RecommendationId": "f53b7e8002f5460411099b5bc0dadbfa8f4ce0f8da75fac14806e70d0716d647", "StartLine": 77, "EndLine": 77, "Description": "**Problem**\nThis line of code might contain a resource leak. Resource leaks can cause your system to slow down or crash.\n\n**Fix**\nConsider closing the following resource: *is*. Currently, there are execution paths that do not contain closure statements, for example, when MvtReader.loadMvt throws an exception. Ensure *is* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "RecommendationId": "f835a6656148e4eaf566438d18eadb1b4a49b9822642a34aa83ca7ba66c50c96", "StartLine": 742, "EndLine": 742, "Description": "The result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/data/Amenity.java", "RecommendationId": "f8be24c50b64e3378d8394f07863282060d6a4ebbb0c82ff1f50b65e280325e3", "StartLine": 226, "EndLine": 226, "Description": "**Problem:**\n This line of code lacks validation when processing input data through the following parameter: 'defLang' (index: 2 | type: String). The parameter is exposed to external callers, because its enclosing class and method are publicly accessible. This means that upstream validation, if it exists, can be bypassed. Other validated parameters: 'tag', 'lang'. The same parameter type is validated here for example: OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessage.java:791. Malicious, malformed, or unbounded inputs can cause unexpected runtime behavior or crashes, and can slow performance.\n\n**Fix:**\n Add checks to ensure the validity of the parameter's value, such as testing it for nullness (for example, using the @NonNull annotation as [described in the Lombok library](https://projectlombok.org/features/NonNull)), emptiness, or equality. Or to prevent direct calls to it, reduce the method's visibility.\n\nLearn more about potential threats and guidance from the [Common Weakness Enumeration website](https://cwe.mitre.org/data/definitions/693.html) and the [OWASP Cheat Sheet series](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html)."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "fb61e7bbba3a170347e89e2bc07200f5651dd0ada7c19e996c842b3d0fdb29c3", "StartLine": 12557, "EndLine": 12557, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/api/FileSettingsAPIImpl.java", "RecommendationId": "fc303d151664f8c516bf533244eaa9cb45bdb35983a0384b2884351a7cab009f", "StartLine": 118, "EndLine": 118, "Description": "**Problem**\nThis line of code contains a resource that might not be closed properly. This can cause a resource leak that slows down or crashes your system.\n\n**Fix**\nConsider closing the following resource: *fout*. The resource is referenced at line 119. The resource is closed at line 120. There are other execution paths that do not contain closure statements, for example, when Properties.store throws an exception. Ensure *fout* is closed in a try-finally block or declared in a try-with-resources block.\n\n**More info**\n[View resource management guidelines at oracle.com](https://www.oracle.com/technetwork/articles/java/trywithresources-401775.html) (external link)."}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/DescriptorProtos.java", "RecommendationId": "fc5532a0aa9eaa8d16bd28f2fcf08ab55fd79fb08357137d107ca5a2875a8810", "StartLine": 13675, "EndLine": 13675, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/AbstractMessageLite.java", "RecommendationId": "fc6ed1e5e13ea13c37ff95242fabbd5b3c8feee7b2cbbd5e313027f10b8af217", "StartLine": 132, "EndLine": 132, "Description": "**Problem**: An exception is caught and re-thrown within the catch clause without any other operations being performed on the exception, making the catch clause unnecessary.\n\n**Fix**: Perform additional operations on the exception that has been caught. You can wrap a standard exception into a custom exception to add additional information or special handling. When you do that, make sure to set the original exception as the cause. Otherwise, you will lose the stack trace and message of the original exception, which will make it difficult to analyze the event that caused the exception.  \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd/src/net/osmand/plus/mapcontextmenu/MenuController.java", "RecommendationId": "fce81ea65164b4acf003cf35db8f55cb95a753a45006f10bacbd07bb6b5e13a0", "StartLine": 93, "EndLine": 93, "Description": "This class references 93 other classes. By comparison, 99% of the classes in the CodeGuru reference dataset reference fewer. This indicates that this class is highly coupled with other classes. A class that is highly coupled with other classes is difficult to understand and its behavior might change unexpectedly when one of its referenced classes is updated. High coupling could also increase the integration test complexity, maintenance cost and technical debt. We recommend that you simplify this class or break it into multiple classes."}, {"FilePath": "OsmAnd-java/src/main/java/net/osmand/binary/OsmandOdb.java", "RecommendationId": "ff2deb1dc522ebe66fe1a348fb0981c653959ad0a7c540432d4be288c8eddb40", "StartLine": 14132, "EndLine": 14132, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}, {"FilePath": "OsmAnd-java/src/main/java/com/google/protobuf/GeneratedMessage.java", "RecommendationId": "ff3d253b2d3e0f98f4c4730e52332cf7a0e83a694247c451930ba9b43ce0b0b5", "StartLine": 1432, "EndLine": 1432, "Description": "**Problem**: While wrapping the caught exception into a custom one, information about the caught exception is being lost, including information about the stack trace of the exception.\n\n**Fix**: If the caught exception object does not contain sensitive information, consider passing it as the \"rootCause\" or inner exception parameter to the constructor of the new exception before throwing the new exception. (Note that not all exception constructors support inner exceptions. Use a wrapper exception that supports inner exceptions.) \n[Learn more](https://www.ibm.com/support/pages/best-practice-catching-and-re-throwing-java-exceptions)"}]}